name: Build Cursor Packages

permissions:
  contents: write
  packages: write

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [main]
    paths: [".github/workflows/build-packages.yml"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      x64_download_url: ${{ steps.check.outputs.x64_download_url }}
      arm64_download_url: ${{ steps.check.outputs.arm64_download_url }}
      commit_sha: ${{ steps.check.outputs.commit_sha }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new version (oslook/cursor-ai-downloads)
        id: check
        run: |
          echo "Fetching latest version info from oslook/cursor-ai-downloads repository..."
          
          # Fetch the version history JSON
          JSON_DATA=$(curl -sL "https://raw.githubusercontent.com/oslook/cursor-ai-downloads/main/version-history.json")
          
          if [ -z "$JSON_DATA" ]; then
            echo "Error: Failed to download version-history.json."
            exit 1
          fi

          # Get the latest entry (the first one in the array)
          LATEST_ENTRY=$(echo "$JSON_DATA" | jq -c '.versions[0]')
          
          # Extract the required information using jq
          VERSION=$(echo "$LATEST_ENTRY" | jq -r '.version')
          X64_DOWNLOAD_URL=$(echo "$LATEST_ENTRY" | jq -r '.platforms["linux-x64"]')
          ARM64_DOWNLOAD_URL=$(echo "$LATEST_ENTRY" | jq -r '.platforms["linux-arm64"]')
          # Commit SHA is not available in this data source
          COMMIT_SHA="N/A"

          # Ensure variables are not empty after parsing
          if [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
            echo "Error: VERSION is empty after parsing."
            exit 1
          fi
          if [ -z "$X64_DOWNLOAD_URL" ] || [ "$X64_DOWNLOAD_URL" == "null" ]; then
            echo "Error: X64_DOWNLOAD_URL is empty after parsing."
            exit 1
          fi
          if [ -z "$ARM64_DOWNLOAD_URL" ] || [ "$ARM64_DOWNLOAD_URL" == "null" ]; then
            echo "Error: ARM64_DOWNLOAD_URL is empty after parsing."
            exit 1
          fi

          echo "Latest Version Found: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "x64_download_url=$X64_DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "arm64_download_url=$ARM64_DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Check if this version already exists as a release
          if gh release view "v$VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Release v$VERSION already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "New version $VERSION found, will build packages"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-packages:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            deb_arch: amd64
            rpm_arch: x86_64
            download_url_key: x64_download_url
          - arch: arm64
            deb_arch: arm64
            rpm_arch: aarch64
            download_url_key: arm64_download_url
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache AppImage downloads
        uses: actions/cache@v4
        with:
          path: |
            Cursor-*.AppImage
          key: cursor-appimage-${{ needs.check-version.outputs.version }}-${{ matrix.arch }}
          restore-keys: |
            cursor-appimage-${{ needs.check-version.outputs.version }}-

      - name: Install dependencies
        run: |
          # Use faster mirrors and parallel downloads
          echo 'APT::Acquire::Retries "3";' | sudo tee -a /etc/apt/apt.conf.d/80-retries
          echo 'APT::Acquire::http::Dl-Limit "0";' | sudo tee -a /etc/apt/apt.conf.d/80-no-limit
          echo 'Acquire::Languages "none";' | sudo tee -a /etc/apt/apt.conf.d/80-no-translations

          # Only update if cache is empty
          if [ ! -f /var/lib/apt/lists/lock ]; then
            sudo apt-get update
          fi

          # Install all dependencies in one command with minimal output
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            dpkg-dev \
            imagemagick \
            jq \
            curl \
            fakeroot \
            squashfs-tools \
            ruby \
            ruby-dev \
            build-essential

          # Install fpm for better package building
          sudo gem install fpm

      - name: Download and extract AppImage
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          DOWNLOAD_URL="${{ needs.check-version.outputs[matrix.download_url_key] }}"
          APPIMAGE_FILE="Cursor-$VERSION-${{ matrix.arch }}.AppImage"

          # Only download if not cached
          if [ ! -f "$APPIMAGE_FILE" ]; then
            echo "Downloading Cursor $VERSION (${{ matrix.arch }}) from $DOWNLOAD_URL"
            curl -L -o "$APPIMAGE_FILE" "$DOWNLOAD_URL"
          else
            echo "Using cached AppImage: $APPIMAGE_FILE"
          fi

          chmod +x "$APPIMAGE_FILE"

          # Extract AppImage based on architecture
          if [ "${{ matrix.arch }}" = "x64" ]; then
            # x86_64 can be executed directly
            "./$APPIMAGE_FILE" --appimage-extract
          else
            # ARM64 needs different extraction method (can't execute on x86_64 runner)
            # AppImages contain a SquashFS filesystem after the ELF header
            # Find the SquashFS magic bytes and extract from there
            SQUASHFS_OFFSET=$(grep -aboP '\x68\x73\x71\x73' "$APPIMAGE_FILE" | head -1 | cut -d: -f1)
            if [ -z "$SQUASHFS_OFFSET" ]; then
              # Try alternative SquashFS magic
              SQUASHFS_OFFSET=$(grep -aboP '\x73\x71\x73\x68' "$APPIMAGE_FILE" | head -1 | cut -d: -f1)
            fi
            
            if [ -n "$SQUASHFS_OFFSET" ]; then
              echo "Found SquashFS at offset: $SQUASHFS_OFFSET"
              # Extract the SquashFS part using tail (faster and more reliable)
              tail -c +$((SQUASHFS_OFFSET + 1)) "$APPIMAGE_FILE" > cursor.squashfs
              # Extract using unsquashfs
              unsquashfs -d squashfs-root cursor.squashfs
              rm cursor.squashfs
            else
              echo "Could not find SquashFS in AppImage, trying direct unsquashfs..."
              unsquashfs -d squashfs-root "$APPIMAGE_FILE" || {
                echo "Direct unsquashfs failed, trying offset extraction..."
                # Fallback: try common AppImage offset
                tail -c +188417 "$APPIMAGE_FILE" > cursor.squashfs
                unsquashfs -d squashfs-root cursor.squashfs
                rm cursor.squashfs
              }
            fi
          fi

          mv squashfs-root cursor-$VERSION-${{ matrix.arch }}

          # Debug: List extracted contents
          echo "Contents of extracted AppImage (${{ matrix.arch }}):"
          ls -la cursor-$VERSION-${{ matrix.arch }}/
          echo "Looking for executable files:"
          find cursor-$VERSION-${{ matrix.arch }}/ -type f -executable -name "*cursor*" -o -name "*Cursor*" | head -10

      - name: Build DEB package
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          ARCHITECTURE="${{ matrix.deb_arch }}"
          PACKAGE_DIR="cursor_${VERSION}_${ARCHITECTURE}"

          # Helper function to find main executable
          find_main_executable() {
            local search_dir="$1"
            if [ -f "$search_dir/cursor" ]; then
              echo "cursor"
            elif [ -f "$search_dir/Cursor" ]; then
              echo "Cursor"
            elif [ -f "$search_dir/AppRun" ]; then
              echo "AppRun"
            else
              find "$search_dir" -maxdepth 1 -type f -executable | head -1 | xargs basename 2>/dev/null || echo ""
            fi
          }

          # Helper function to handle icon installation
          install_icon() {
            local source_icon="$1"
            local target_base_dir="$2"
            if [ -f "$source_icon" ]; then
              local icon_sizes=(16 32 48 64 128 256)
              for size in "${icon_sizes[@]}"; do
                local target_dir="$target_base_dir/usr/share/icons/hicolor/${size}x${size}/apps"
                if command -v convert &> /dev/null; then
                  convert "$source_icon" -resize ${size}x${size} "$target_dir/cursor.png"
                else
                  cp "$source_icon" "$target_dir/cursor.png"
                fi
              done
            fi
          }

          # Create package directory structure
          mkdir -p "$PACKAGE_DIR/DEBIAN"
          mkdir -p "$PACKAGE_DIR/opt/Cursor"
          mkdir -p "$PACKAGE_DIR/usr/share/applications"
          mkdir -p "$PACKAGE_DIR/usr/share/icons/hicolor/"{16x16,32x32,48x48,64x64,128x128,256x256}"/apps"
          mkdir -p "$PACKAGE_DIR/usr/bin"

          # Create control file
          cat > "$PACKAGE_DIR/DEBIAN/control" << EOF
          Package: cursor
          Version: $VERSION
          Architecture: $ARCHITECTURE
          Maintainer: Cursor Linux Packages <noreply@github.com>
          Depends: libgtk-3-0, libnotify4, libnss3, libxss1, libxtst6, xdg-utils, libatspi2.0-0, libuuid1, libsecret-1-0
          Recommends: libappindicator3-1
          Section: editors
          Priority: optional
          Homepage: https://cursor.so
          Description: Cursor - AI-first coding environment
           Cursor is an AI-first coding environment designed to help developers
           build software faster with AI assistance.
          EOF

          # Copy application files
          cp -r cursor-$VERSION-${{ matrix.arch }}/* "$PACKAGE_DIR/opt/Cursor/"

          # Find the main executable (could be 'cursor', 'Cursor', or 'AppRun')
          MAIN_EXECUTABLE=$(find_main_executable "$PACKAGE_DIR/opt/Cursor")

          echo "Found main executable: $MAIN_EXECUTABLE"

          # If the executable is not named 'cursor', create a symlink
          if [ "$MAIN_EXECUTABLE" != "cursor" ] && [ -n "$MAIN_EXECUTABLE" ]; then
            ln -sf "$MAIN_EXECUTABLE" "$PACKAGE_DIR/opt/Cursor/cursor"
          fi

          # Create desktop file
          cat > "$PACKAGE_DIR/usr/share/applications/cursor.desktop" << EOF
          [Desktop Entry]
          Name=Cursor
          Exec=/opt/Cursor/cursor --no-sandbox %U
          Terminal=false
          Type=Application
          Icon=cursor
          StartupWMClass=Cursor
          Comment=Cursor is an AI-first coding environment.
          MimeType=x-scheme-handler/cursor;
          Categories=Development;IDE;
          EOF

          # Handle icon if it exists
          install_icon "cursor-$VERSION-${{ matrix.arch }}/co.anysphere.cursor.png" "$PACKAGE_DIR"

          # Create postinst script
          cat > "$PACKAGE_DIR/DEBIAN/postinst" << 'EOF'
          #!/bin/bash
          set -e

          # Create symlink for command line usage
          if type update-alternatives 2>/dev/null >&1; then
              if [ -L '/usr/bin/cursor' -a -e '/usr/bin/cursor' -a "`readlink '/usr/bin/cursor'`" != '/etc/alternatives/cursor' ]; then
                  rm -f '/usr/bin/cursor'
              fi
              update-alternatives --install '/usr/bin/cursor' 'cursor' '/opt/Cursor/cursor' 100 || ln -sf '/opt/Cursor/cursor' '/usr/bin/cursor'
          else
              ln -sf '/opt/Cursor/cursor' '/usr/bin/cursor'
          fi

          # Set proper permissions for chrome-sandbox
          if [ -f '/opt/Cursor/chrome-sandbox' ]; then
              if ! { [[ -L /proc/self/ns/user ]] && unshare --user true; }; then
                  chmod 4755 '/opt/Cursor/chrome-sandbox' || true
              else
                  chmod 0755 '/opt/Cursor/chrome-sandbox' || true
              fi
          fi

          # Update desktop database
          if hash update-mime-database 2>/dev/null; then
              update-mime-database /usr/share/mime || true
          fi

          if hash update-desktop-database 2>/dev/null; then
              update-desktop-database /usr/share/applications || true
          fi
          EOF

          # Create postrm script
          cat > "$PACKAGE_DIR/DEBIAN/postrm" << 'EOF'
          #!/bin/bash
          set -e

          # Remove symlink
          if type update-alternatives >/dev/null 2>&1; then
              update-alternatives --remove 'cursor' '/opt/Cursor/cursor' || true
          else
              rm -f '/usr/bin/cursor'
          fi
          EOF

          # Make scripts executable
          chmod 755 "$PACKAGE_DIR/DEBIAN/postinst"
          chmod 755 "$PACKAGE_DIR/DEBIAN/postrm"

          # Set proper permissions for executables
          if [ -n "$MAIN_EXECUTABLE" ]; then
            chmod 755 "$PACKAGE_DIR/opt/Cursor/$MAIN_EXECUTABLE"
          fi
          # Ensure cursor symlink/file has correct permissions
          if [ -f "$PACKAGE_DIR/opt/Cursor/cursor" ] || [ -L "$PACKAGE_DIR/opt/Cursor/cursor" ]; then
            chmod 755 "$PACKAGE_DIR/opt/Cursor/cursor"
          fi
          find "$PACKAGE_DIR/opt/Cursor" -name "*.so*" -exec chmod 755 {} \; || true

          # Generate md5sums
          cd "$PACKAGE_DIR"
          find . -type f ! -path "./DEBIAN/*" -exec md5sum {} \; | sed 's/\.\///' > DEBIAN/md5sums
          chmod 644 DEBIAN/md5sums
          cd ..

          # Build DEB package
          dpkg-deb --build --root-owner-group "$PACKAGE_DIR"

          echo "DEB package created: ${PACKAGE_DIR}.deb"

      - name: Build RPM package
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"

          # Helper function to find main executable
          find_main_executable() {
            local search_dir="$1"
            if [ -f "$search_dir/cursor" ]; then
              echo "cursor"
            elif [ -f "$search_dir/Cursor" ]; then
              echo "Cursor"
            elif [ -f "$search_dir/AppRun" ]; then
              echo "AppRun"
            else
              find "$search_dir" -maxdepth 1 -type f -executable | head -1 | xargs basename 2>/dev/null || echo ""
            fi
          }

          # Helper function to handle icon installation
          install_icon() {
            local source_icon="$1"
            local target_base_dir="$2"
            if [ -f "$source_icon" ]; then
              local icon_sizes=(16 32 48 64 128 256)
              for size in "${icon_sizes[@]}"; do
                local target_dir="$target_base_dir/usr/share/icons/hicolor/${size}x${size}/apps"
                if command -v convert &> /dev/null; then
                  convert "$source_icon" -resize ${size}x${size} "$target_dir/cursor.png"
                else
                  cp "$source_icon" "$target_dir/cursor.png"
                fi
              done
            fi
          }

          # Create temporary directory for RPM contents
          mkdir -p rpm-staging/opt/Cursor
          mkdir -p rpm-staging/usr/share/applications
          mkdir -p rpm-staging/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64,128x128,256x256}/apps
          mkdir -p rpm-staging/usr/bin

          # Copy application files
          cp -r cursor-$VERSION-${{ matrix.arch }}/* rpm-staging/opt/Cursor/

          # Find and create symlink for main executable
          MAIN_EXECUTABLE=$(find_main_executable "rpm-staging/opt/Cursor")

          echo "Found main executable: $MAIN_EXECUTABLE"

          # Create cursor symlink if needed
          if [ "$MAIN_EXECUTABLE" != "cursor" ] && [ -n "$MAIN_EXECUTABLE" ]; then
            ln -sf "$MAIN_EXECUTABLE" "rpm-staging/opt/Cursor/cursor"
          fi

          # Create desktop file
          cat > rpm-staging/usr/share/applications/cursor.desktop << EOF
          [Desktop Entry]
          Name=Cursor
          Exec=/opt/Cursor/cursor --no-sandbox %U
          Terminal=false
          Type=Application
          Icon=cursor
          StartupWMClass=Cursor
          Comment=Cursor is an AI-first coding environment.
          MimeType=x-scheme-handler/cursor;
          Categories=Development;IDE;
          EOF

          # Create symlink for command line usage
          ln -sf /opt/Cursor/cursor rpm-staging/usr/bin/cursor

          # Handle icon if it exists
          install_icon "cursor-$VERSION-${{ matrix.arch }}/co.anysphere.cursor.png" "rpm-staging"

          # Build RPM using fpm (much more flexible for cross-architecture)
          # Create post-install script
          echo '#!/bin/bash' > post-install.sh
          echo '# Update desktop database' >> post-install.sh
          echo 'if [ -x /usr/bin/update-desktop-database ]; then' >> post-install.sh
          echo '    /usr/bin/update-desktop-database /usr/share/applications || true' >> post-install.sh
          echo 'fi' >> post-install.sh

          # Create post-remove script
          echo '#!/bin/bash' > post-remove.sh
          echo '# Update desktop database' >> post-remove.sh
          echo 'if [ -x /usr/bin/update-desktop-database ]; then' >> post-remove.sh
          echo '    /usr/bin/update-desktop-database /usr/share/applications || true' >> post-remove.sh
          echo 'fi' >> post-remove.sh

          fpm -s dir -t rpm \
            --name cursor \
            --version "$VERSION" \
            --iteration 1 \
            --architecture ${{ matrix.rpm_arch }} \
            --description "Cursor - AI-first coding environment" \
            --url "https://cursor.so" \
            --license "Proprietary" \
            --vendor "Cursor Linux Packages" \
            --maintainer "Cursor Linux Packages <noreply@github.com>" \
            --depends "gtk3" \
            --depends "libnotify" \
            --depends "nss" \
            --depends "libXScrnSaver" \
            --depends "libXtst" \
            --depends "xdg-utils" \
            --depends "at-spi2-atk" \
            --depends "libuuid" \
            --depends "libsecret" \
            --rpm-summary "Cursor - AI-first coding environment" \
            --after-install post-install.sh \
            --after-remove post-remove.sh \
            --chdir rpm-staging \
            .

          # Clean up
          rm -rf rpm-staging post-install.sh post-remove.sh

          echo "RPM package created: cursor-$VERSION-1.${{ matrix.rpm_arch }}.rpm"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: |
            cursor_*_${{ matrix.deb_arch }}.deb
            cursor-*-1.${{ matrix.rpm_arch }}.rpm

  create-release:
    needs: [check-version, build-packages]
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: Create Release
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          COMMIT_SHA="${{ needs.check-version.outputs.commit_sha }}"

          # Create release notes
          cat > release-notes.md << EOF
          # Cursor $VERSION

          This release contains automatically generated Linux packages for Cursor $VERSION.

          ## Installation

          ### Debian/Ubuntu (.deb)

          **x86_64/amd64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_amd64.deb
          sudo dpkg -i cursor_${VERSION}_amd64.deb
          sudo apt-get install -f  # Fix any missing dependencies
          \`\`\`

          **ARM64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_arm64.deb
          sudo dpkg -i cursor_${VERSION}_arm64.deb
          sudo apt-get install -f  # Fix any missing dependencies
          \`\`\`

          ### RHEL/Fedora/CentOS (.rpm)

          **x86_64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.x86_64.rpm
          sudo rpm -i cursor-$VERSION-1.x86_64.rpm
          # or
          sudo dnf install cursor-$VERSION-1.x86_64.rpm
          \`\`\`

          **ARM64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.aarch64.rpm
          sudo rpm -i cursor-$VERSION-1.aarch64.rpm
          # or
          sudo dnf install cursor-$VERSION-1.aarch64.rpm
          \`\`\`

          ## Package Details
          - **Upstream Version**: $VERSION
          - **Commit SHA**: $COMMIT_SHA
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Architectures**: x86_64 (amd64), ARM64 (aarch64)

          ## Usage
          After installation, you can launch Cursor from:
          - Applications menu
          - Command line: \`cursor\`

          ## Issues
          If you encounter any issues with these packages, please report them at: https://github.com/${{ github.repository }}/issues
          EOF

          # Create the release with all packages
          gh release create "v$VERSION" \
            --title "Cursor $VERSION" \
            --notes-file release-notes.md \
            packages/packages-x64/* \
            packages/packages-arm64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          COMMIT_SHA="${{ needs.check-version.outputs.commit_sha }}"

          # Create a JSON file with latest release info for the frontend
          cat > latest-release.json << EOF
          {
            "version": "$VERSION",
            "commit_sha": "$COMMIT_SHA",
            "release_date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "packages": {
              "x64": {
                "deb": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_amd64.deb",
                "rpm": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.x86_64.rpm"
              },
              "arm64": {
                "deb": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_arm64.deb", 
                "rpm": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.aarch64.rpm"
              }
            }
          }
          EOF

          # Commit and push the latest release info
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add latest-release.json
          git commit -m "Update latest release info for v$VERSION" || exit 0
          git push
