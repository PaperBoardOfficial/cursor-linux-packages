name: Build Cursor Packages

permissions:
  contents: write
  packages: write

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [main]
    paths: [".github/workflows/build-packages.yml"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      x64_download_url: ${{ steps.check.outputs.x64_download_url }}
      arm64_download_url: ${{ steps.check.outputs.arm64_download_url }}
      commit_sha: ${{ steps.check.outputs.commit_sha }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new version
        id: check
        run: |
          # Fetch latest version info from Cursor API for both architectures
          X64_RESPONSE=$(curl -s "https://www.cursor.com/api/download?platform=linux-x64&releaseTrack=stable")
          ARM64_RESPONSE=$(curl -s "https://www.cursor.com/api/download?platform=linux-arm64&releaseTrack=stable")

          VERSION=$(echo "$X64_RESPONSE" | jq -r '.version')
          X64_DOWNLOAD_URL=$(echo "$X64_RESPONSE" | jq -r '.downloadUrl')
          ARM64_DOWNLOAD_URL=$(echo "$ARM64_RESPONSE" | jq -r '.downloadUrl')
          COMMIT_SHA=$(echo "$X64_RESPONSE" | jq -r '.commitSha')

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "x64_download_url=$X64_DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "arm64_download_url=$ARM64_DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Check if this version already exists as a release
          if gh release view "v$VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Release v$VERSION already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "New version $VERSION found, will build packages"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-packages:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            deb_arch: amd64
            rpm_arch: x86_64
            download_url_key: x64_download_url
          - arch: arm64
            deb_arch: arm64
            rpm_arch: aarch64
            download_url_key: arm64_download_url
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/build-packages.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Cache AppImage downloads
        uses: actions/cache@v4
        with:
          path: |
            Cursor-*.AppImage
          key: cursor-appimage-${{ needs.check-version.outputs.version }}-${{ matrix.arch }}
          restore-keys: |
            cursor-appimage-${{ needs.check-version.outputs.version }}-

      - name: Install dependencies
        run: |
          # Use faster mirrors and parallel downloads
          echo 'APT::Acquire::Retries "3";' | sudo tee -a /etc/apt/apt.conf.d/80-retries
          echo 'APT::Acquire::http::Dl-Limit "0";' | sudo tee -a /etc/apt/apt.conf.d/80-no-limit
          echo 'Acquire::Languages "none";' | sudo tee -a /etc/apt/apt.conf.d/80-no-translations

          # Only update if cache is empty
          if [ ! -f /var/lib/apt/lists/lock ]; then
            sudo apt-get update
          fi

          # Install all dependencies in one command with minimal output
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            dpkg-dev \
            rpm \
            imagemagick \
            jq \
            curl \
            fakeroot \
            alien \
            squashfs-tools

      - name: Download and extract AppImage
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          DOWNLOAD_URL="${{ needs.check-version.outputs[matrix.download_url_key] }}"
          APPIMAGE_FILE="Cursor-$VERSION-${{ matrix.arch }}.AppImage"

          # Only download if not cached
          if [ ! -f "$APPIMAGE_FILE" ]; then
            echo "Downloading Cursor $VERSION (${{ matrix.arch }}) from $DOWNLOAD_URL"
            curl -L -o "$APPIMAGE_FILE" "$DOWNLOAD_URL"
          else
            echo "Using cached AppImage: $APPIMAGE_FILE"
          fi

          chmod +x "$APPIMAGE_FILE"

          # Extract AppImage based on architecture
          if [ "${{ matrix.arch }}" = "x64" ]; then
            # x86_64 can be executed directly
            "./$APPIMAGE_FILE" --appimage-extract
          else
            # ARM64 needs different extraction method (can't execute on x86_64 runner)
            # AppImages contain a SquashFS filesystem after the ELF header
            # Find the SquashFS magic bytes and extract from there
            SQUASHFS_OFFSET=$(grep -aboP '\x68\x73\x71\x73' "$APPIMAGE_FILE" | head -1 | cut -d: -f1)
            if [ -z "$SQUASHFS_OFFSET" ]; then
              # Try alternative SquashFS magic
              SQUASHFS_OFFSET=$(grep -aboP '\x73\x71\x73\x68' "$APPIMAGE_FILE" | head -1 | cut -d: -f1)
            fi
            
            if [ -n "$SQUASHFS_OFFSET" ]; then
              echo "Found SquashFS at offset: $SQUASHFS_OFFSET"
              # Extract the SquashFS part using tail (faster and more reliable)
              tail -c +$((SQUASHFS_OFFSET + 1)) "$APPIMAGE_FILE" > cursor.squashfs
              # Extract using unsquashfs
              unsquashfs -d squashfs-root cursor.squashfs
              rm cursor.squashfs
            else
              echo "Could not find SquashFS in AppImage, trying direct unsquashfs..."
              unsquashfs -d squashfs-root "$APPIMAGE_FILE" || {
                echo "Direct unsquashfs failed, trying offset extraction..."
                # Fallback: try common AppImage offset
                tail -c +188417 "$APPIMAGE_FILE" > cursor.squashfs
                unsquashfs -d squashfs-root cursor.squashfs
                rm cursor.squashfs
              }
            fi
          fi

          mv squashfs-root cursor-$VERSION-${{ matrix.arch }}

          # Debug: List extracted contents
          echo "Contents of extracted AppImage (${{ matrix.arch }}):"
          ls -la cursor-$VERSION-${{ matrix.arch }}/
          echo "Looking for executable files:"
          find cursor-$VERSION-${{ matrix.arch }}/ -type f -executable -name "*cursor*" -o -name "*Cursor*" | head -10

      - name: Build DEB package
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          PACKAGE_NAME="cursor"
          ARCHITECTURE="${{ matrix.deb_arch }}"
          MAINTAINER="Cursor Linux Packages <noreply@github.com>"
          PACKAGE_DIR="cursor_${VERSION}_${ARCHITECTURE}"

          # Create package directory structure
          mkdir -p "$PACKAGE_DIR/DEBIAN"
          mkdir -p "$PACKAGE_DIR/opt/Cursor"
          mkdir -p "$PACKAGE_DIR/usr/share/applications"
          mkdir -p "$PACKAGE_DIR/usr/share/icons/hicolor/"{16x16,32x32,48x48,64x64,128x128,256x256}"/apps"
          mkdir -p "$PACKAGE_DIR/usr/share/doc/cursor"
          mkdir -p "$PACKAGE_DIR/usr/bin"

          # Create control file
          cat > "$PACKAGE_DIR/DEBIAN/control" << EOF
          Package: $PACKAGE_NAME
          Version: $VERSION
          Architecture: $ARCHITECTURE
          Maintainer: $MAINTAINER
          Depends: libgtk-3-0, libnotify4, libnss3, libxss1, libxtst6, xdg-utils, libatspi2.0-0, libuuid1, libsecret-1-0
          Recommends: libappindicator3-1
          Section: editors
          Priority: optional
          Homepage: https://cursor.so
          Description: Cursor - AI-first coding environment
           Cursor is an AI-first coding environment designed to help developers
           build software faster with AI assistance.
          EOF

          # Copy application files
          cp -r cursor-$VERSION-${{ matrix.arch }}/* "$PACKAGE_DIR/opt/Cursor/"

          # Find the main executable (could be 'cursor', 'Cursor', or 'AppRun')
          MAIN_EXECUTABLE=""
          if [ -f "$PACKAGE_DIR/opt/Cursor/cursor" ]; then
            MAIN_EXECUTABLE="cursor"
          elif [ -f "$PACKAGE_DIR/opt/Cursor/Cursor" ]; then
            MAIN_EXECUTABLE="Cursor"
          elif [ -f "$PACKAGE_DIR/opt/Cursor/AppRun" ]; then
            MAIN_EXECUTABLE="AppRun"
          else
            # Find any executable file that might be the main app
            MAIN_EXECUTABLE=$(find "$PACKAGE_DIR/opt/Cursor/" -maxdepth 1 -type f -executable | head -1 | xargs basename)
          fi

          echo "Found main executable: $MAIN_EXECUTABLE"

          # If the executable is not named 'cursor', create a symlink
          if [ "$MAIN_EXECUTABLE" != "cursor" ] && [ -n "$MAIN_EXECUTABLE" ]; then
            ln -sf "$MAIN_EXECUTABLE" "$PACKAGE_DIR/opt/Cursor/cursor"
          fi

          # Create desktop file
          cat > "$PACKAGE_DIR/usr/share/applications/cursor.desktop" << EOF
          [Desktop Entry]
          Name=Cursor
          Exec=/opt/Cursor/cursor %U
          Terminal=false
          Type=Application
          Icon=cursor
          StartupWMClass=Cursor
          Comment=Cursor is an AI-first coding environment.
          MimeType=x-scheme-handler/cursor;
          Categories=Development;IDE;
          EOF

          # Handle icon if it exists
          if [ -f "cursor-$VERSION-${{ matrix.arch }}/co.anysphere.cursor.png" ]; then
            SOURCE_ICON="cursor-$VERSION-${{ matrix.arch }}/co.anysphere.cursor.png"
            ICON_SIZES=(16 32 48 64 128 256)
            for size in "${ICON_SIZES[@]}"; do
              target_dir="$PACKAGE_DIR/usr/share/icons/hicolor/${size}x${size}/apps"
              if command -v convert &> /dev/null; then
                convert "$SOURCE_ICON" -resize ${size}x${size} "$target_dir/cursor.png"
              else
                cp "$SOURCE_ICON" "$target_dir/cursor.png"
              fi
            done
          fi

          # Create postinst script
          cat > "$PACKAGE_DIR/DEBIAN/postinst" << 'EOF'
          #!/bin/bash
          set -e

          # Create symlink for command line usage
          if type update-alternatives 2>/dev/null >&1; then
              if [ -L '/usr/bin/cursor' -a -e '/usr/bin/cursor' -a "`readlink '/usr/bin/cursor'`" != '/etc/alternatives/cursor' ]; then
                  rm -f '/usr/bin/cursor'
              fi
              update-alternatives --install '/usr/bin/cursor' 'cursor' '/opt/Cursor/cursor' 100 || ln -sf '/opt/Cursor/cursor' '/usr/bin/cursor'
          else
              ln -sf '/opt/Cursor/cursor' '/usr/bin/cursor'
          fi

          # Set proper permissions for chrome-sandbox
          if [ -f '/opt/Cursor/chrome-sandbox' ]; then
              if ! { [[ -L /proc/self/ns/user ]] && unshare --user true; }; then
                  chmod 4755 '/opt/Cursor/chrome-sandbox' || true
              else
                  chmod 0755 '/opt/Cursor/chrome-sandbox' || true
              fi
          fi

          # Update desktop database
          if hash update-mime-database 2>/dev/null; then
              update-mime-database /usr/share/mime || true
          fi

          if hash update-desktop-database 2>/dev/null; then
              update-desktop-database /usr/share/applications || true
          fi
          EOF

          # Create postrm script
          cat > "$PACKAGE_DIR/DEBIAN/postrm" << 'EOF'
          #!/bin/bash
          set -e

          # Remove symlink
          if type update-alternatives >/dev/null 2>&1; then
              update-alternatives --remove 'cursor' '/opt/Cursor/cursor' || true
          else
              rm -f '/usr/bin/cursor'
          fi
          EOF

          # Make scripts executable
          chmod 755 "$PACKAGE_DIR/DEBIAN/postinst"
          chmod 755 "$PACKAGE_DIR/DEBIAN/postrm"

          # Set proper permissions for executables
          if [ -n "$MAIN_EXECUTABLE" ]; then
            chmod 755 "$PACKAGE_DIR/opt/Cursor/$MAIN_EXECUTABLE"
          fi
          # Ensure cursor symlink/file has correct permissions
          if [ -f "$PACKAGE_DIR/opt/Cursor/cursor" ] || [ -L "$PACKAGE_DIR/opt/Cursor/cursor" ]; then
            chmod 755 "$PACKAGE_DIR/opt/Cursor/cursor"
          fi
          find "$PACKAGE_DIR/opt/Cursor" -name "*.so*" -exec chmod 755 {} \; || true

          # Generate md5sums
          cd "$PACKAGE_DIR"
          find . -type f ! -path "./DEBIAN/*" -exec md5sum {} \; | sed 's/\.\///' > DEBIAN/md5sums
          chmod 644 DEBIAN/md5sums
          cd ..

          # Build DEB package
          dpkg-deb --build --root-owner-group "$PACKAGE_DIR"

          echo "DEB package created: ${PACKAGE_DIR}.deb"

      - name: Build RPM package
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"

          # Create RPM build directories
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Create spec file with noarch to avoid architecture validation issues
          cat > ~/rpmbuild/SPECS/cursor.spec << EOF
          Name:           cursor
          Version:        $VERSION
          Release:        1%{?dist}
          Summary:        Cursor - AI-first coding environment
          License:        Proprietary
          URL:            https://cursor.so
          BuildArch:      noarch
          Requires:       gtk3, libnotify, nss, libXScrnSaver, libXtst, xdg-utils, at-spi2-atk, libuuid, libsecret

          %description
          Cursor is an AI-first coding environment designed to help developers
          build software faster with AI assistance.

          %prep
          # No prep needed for binary package

          %build
          # No build needed for binary package

          %install
          rm -rf \$RPM_BUILD_ROOT
          mkdir -p \$RPM_BUILD_ROOT/opt/Cursor
          mkdir -p \$RPM_BUILD_ROOT/usr/share/applications
          mkdir -p \$RPM_BUILD_ROOT/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64,128x128,256x256}/apps
          mkdir -p \$RPM_BUILD_ROOT/usr/bin

          # Copy application files
          cp -r %{_sourcedir}/cursor-$VERSION-${{ matrix.arch }}/* \$RPM_BUILD_ROOT/opt/Cursor/

          # Create desktop file
          cat > \$RPM_BUILD_ROOT/usr/share/applications/cursor.desktop << 'DESKTOP_EOF'
          [Desktop Entry]
          Name=Cursor
          Exec=/opt/Cursor/cursor %U
          Terminal=false
          Type=Application
          Icon=cursor
          StartupWMClass=Cursor
          Comment=Cursor is an AI-first coding environment.
          MimeType=x-scheme-handler/cursor;
          Categories=Development;IDE;
          DESKTOP_EOF

          # Create symlink
          ln -sf /opt/Cursor/cursor \$RPM_BUILD_ROOT/usr/bin/cursor

          %files
          /opt/Cursor/*
          /usr/share/applications/cursor.desktop
          /usr/bin/cursor

          %post
          # Update desktop database
          if [ -x /usr/bin/update-desktop-database ]; then
              /usr/bin/update-desktop-database /usr/share/applications || true
          fi

          %postun
          # Update desktop database
          if [ -x /usr/bin/update-desktop-database ]; then
              /usr/bin/update-desktop-database /usr/share/applications || true
          fi

          %changelog
          * $(date '+%a %b %d %Y') GitHub Actions <noreply@github.com> - $VERSION-1
          - Automated build of Cursor $VERSION
          EOF

          # Copy source files
          cp -r cursor-$VERSION-${{ matrix.arch }} ~/rpmbuild/SOURCES/

          # Build RPM as noarch
          rpmbuild -bb ~/rpmbuild/SPECS/cursor.spec

          # Rename the built RPM to include the correct architecture
          mv ~/rpmbuild/RPMS/noarch/cursor-$VERSION-1.*.rpm ./cursor-$VERSION-1.${{ matrix.rpm_arch }}.rpm

          echo "RPM package created: cursor-$VERSION-1.${{ matrix.rpm_arch }}.rpm"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: |
            cursor_*_${{ matrix.deb_arch }}.deb
            cursor-*-1.${{ matrix.rpm_arch }}.rpm

  create-release:
    needs: [check-version, build-packages]
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: Create Release
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          COMMIT_SHA="${{ needs.check-version.outputs.commit_sha }}"

          # Create release notes
          cat > release-notes.md << EOF
          # Cursor $VERSION

          This release contains automatically generated Linux packages for Cursor $VERSION.

          ## Installation

          ### Debian/Ubuntu (.deb)

          **x86_64/amd64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_amd64.deb
          sudo dpkg -i cursor_${VERSION}_amd64.deb
          sudo apt-get install -f  # Fix any missing dependencies
          \`\`\`

          **ARM64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_arm64.deb
          sudo dpkg -i cursor_${VERSION}_arm64.deb
          sudo apt-get install -f  # Fix any missing dependencies
          \`\`\`

          ### RHEL/Fedora/CentOS (.rpm)

          **x86_64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.x86_64.rpm
          sudo rpm -i cursor-$VERSION-1.x86_64.rpm
          # or
          sudo dnf install cursor-$VERSION-1.x86_64.rpm
          \`\`\`

          **ARM64:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.aarch64.rpm
          sudo rpm -i cursor-$VERSION-1.aarch64.rpm
          # or
          sudo dnf install cursor-$VERSION-1.aarch64.rpm
          \`\`\`

          ## Package Details
          - **Upstream Version**: $VERSION
          - **Commit SHA**: $COMMIT_SHA
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Architectures**: x86_64 (amd64), ARM64 (aarch64)

          ## Usage
          After installation, you can launch Cursor from:
          - Applications menu
          - Command line: \`cursor\`

          ## Issues
          If you encounter any issues with these packages, please report them at: https://github.com/${{ github.repository }}/issues
          EOF

          # Create the release with all packages
          gh release create "v$VERSION" \
            --title "Cursor $VERSION" \
            --notes-file release-notes.md \
            packages/packages-x64/* \
            packages/packages-arm64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          COMMIT_SHA="${{ needs.check-version.outputs.commit_sha }}"

          # Create a JSON file with latest release info for the frontend
          cat > latest-release.json << EOF
          {
            "version": "$VERSION",
            "commit_sha": "$COMMIT_SHA",
            "release_date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "packages": {
              "x64": {
                "deb": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_amd64.deb",
                "rpm": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.x86_64.rpm"
              },
              "arm64": {
                "deb": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor_${VERSION}_arm64.deb", 
                "rpm": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/cursor-$VERSION-1.aarch64.rpm"
              }
            }
          }
          EOF

          # Commit and push the latest release info
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add latest-release.json
          git commit -m "Update latest release info for v$VERSION" || exit 0
          git push
